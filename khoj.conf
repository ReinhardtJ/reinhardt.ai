server {
    listen 80;
    server_name khoj.reinhardt.ai;

    # Default auth settings
    auth_basic "Restricted Access";
    auth_basic_user_file /etc/nginx/.htpasswd;

    client_max_body_size 1000m;

    # Timeout settings
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    send_timeout 300s;

    # Variables for URL credentials extraction
    set $auth_user "";
    set $auth_pass "";
    set $auth_header "";

    # Extract credentials from URL if present
    # Check if URL has the format https://username:password@domain
    if ($request_uri ~ "^/https://([^:]+):([^@]+)@(.*)$") {
        set_unescape_uri $auth_user $1;
        set_unescape_uri $auth_pass $2;
        set_encode_base64 $auth_header "$auth_user:$auth_pass";
        set $auth_header "Basic $auth_header";
        rewrite ^/https://[^@]+@(.*)$ /https://$1 break;
    }

    # Check if URL has the format http://username:password@domain
    if ($request_uri ~ "^/http://([^:]+):([^@]+)@(.*)$") {
        set_unescape_uri $auth_user $1;
        set_unescape_uri $auth_pass $2;
        set_encode_base64 $auth_header "$auth_user:$auth_pass";
        set $auth_header "Basic $auth_header";
        rewrite ^/http://[^@]+@(.*)$ /http://$1 break;
    }

    # Use existing Authorization header if present
    if ($http_authorization) {
        set $auth_header $http_authorization;
    }

    # Basic auth for all paths
    location / {
        # If URL contains credentials or Authorization header exists, use them
        if ($auth_header) {
            proxy_set_header Authorization $auth_header;
            # Skip Nginx's basic auth when credentials are provided in URL
            auth_basic off;
        }

        proxy_pass http://khoj-server:42110;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass_header Authorization;
    }
}