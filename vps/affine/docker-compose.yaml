services:
  affine:
    image: ghcr.io/toeverything/affine:${AFFINE_REVISION:-stable}
    container_name: affine_server
    expose:
      - "3010"
    networks:
      - reinhardt_net
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      affine_migration:
        condition: service_completed_successfully
    volumes:
      # custom configurations
      - ${UPLOAD_LOCATION}:/root/.affine/storage
      - ${CONFIG_LOCATION}:/root/.affine/config
    env_file:
      - .env
    environment:
      - VIRTUAL_HOST=affine.reinhardt.ai
      - LETSENCRYPT_HOST=affine.reinhardt.ai
      - VIRTUAL_PORT=3010
      - REDIS_SERVER_HOST=redis
      - DATABASE_URL=postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE:-affine}
      - AFFINE_INDEXER_ENABLED=false
    restart: on-failure:10
    logging:
      options:
        max-size: "50m"

  affine_migration:
    image: ghcr.io/toeverything/affine:${AFFINE_REVISION:-stable}
    container_name: affine_migration_job
    volumes:
      # custom configurations
      - ${UPLOAD_LOCATION}:/root/.affine/storage
      - ${CONFIG_LOCATION}:/root/.affine/config
    command: ['sh', '-c', 'node ./scripts/self-host-predeploy.js']
    env_file:
      - .env
    environment:
      - REDIS_SERVER_HOST=redis
      - DATABASE_URL=postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE:-affine}
      - AFFINE_INDEXER_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reinhardt_net
    restart: on-failure:10
    logging:
      options:
        max-size: "50m"

  redis:
    image: redis
    container_name: affine_redis
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure:10
    logging:
      options:
        max-size: "50m"
    networks:
      - reinhardt_net

  postgres:
    image: pgvector/pgvector:pg16
    container_name: affine_postgres
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE:-affine}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      # you better set a password for you database
      # or you may add 'POSTGRES_HOST_AUTH_METHOD=trust' to ignore postgres security policy
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test:
        ['CMD', 'pg_isready', '-U', "${DB_USERNAME}", '-d', "${DB_DATABASE:-affine}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure:10
    logging:
      options:
        max-size: "50m"
    networks:
      - reinhardt_net

  affine-backup-ts:
    image: tailscale/tailscale:latest
    container_name: affine-backup-ts
    hostname: affine-backup
    environment:
      - TS_AUTHKEY
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
    volumes:
      - ./ts-data/affine-backup:/var/lib/tailscale
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
    restart: on-failure:10
    networks:
      - reinhardt_net
    logging:
      options:
        max-size: "50m"

  affine-backup:
    build:
      context: ./affine-backup
    container_name: affine-backup
    network_mode: service:affine-backup-ts
    volumes:
      - ./affine-data/self-host/config:/affine-data/config:ro
      - ./affine-data/self-host/storage:/affine-data/storage:ro
      - ./affine-backup:/affine-backup
      - ./affine-db-backups:/affine-db-backups
    environment:
      - RCLONE_REMOTE_HOST=${RCLONE_REMOTE_HOST}
      - RCLONE_REMOTE_USER=${RCLONE_REMOTE_USER}
      - RCLONE_SSH_KEY=${RCLONE_SSH_KEY}
    env_file:
      - .env
    depends_on:
      - affine-backup-ts
      - postgres
    restart: on-failure:10
    logging:
      options:
        max-size: "50m"

networks:
  reinhardt_net:
    driver: bridge
    name: reinhardt_net